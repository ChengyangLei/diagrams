<mxfile host="app.diagrams.net" modified="2022-05-06T08:16:17.404Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36" etag="a1BnA3ZKo8PCL6631M_x" version="17.4.3" type="github">
  <diagram id="TSFlF6Cpssye0CTwUoHi" name="Page-1">
    <mxGraphModel dx="3022" dy="762" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1600" pageHeight="1200" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="Gmhn6fOIwjOEDDS0CNlP-2" value="&lt;div&gt;业内常用的MQ有哪些？&lt;/div&gt;&lt;div&gt;每一种MQ各自的表现如何？&lt;/div&gt;&lt;div&gt;这些MQ在同等机器条件下，能抗多少QPS（每秒抗几千QPS还是几万QPS）？&lt;/div&gt;&lt;div&gt;性能有多高（发送一条消息给他要2ms还是20ms）？&lt;/div&gt;&lt;div&gt;可用性能不能得到保证（要是MQ部署的机器挂了怎么办）？&lt;/div&gt;&lt;div&gt;然后你还得考虑：&lt;/div&gt;&lt;div&gt;他们会不会丢失数据？&lt;/div&gt;&lt;div&gt;如果需要的话能否让他们进行线性的集群扩容（就是多加几台机器）？&lt;/div&gt;&lt;div&gt;消息中间件经常需要使用的一些功能他们都有吗（比如说延迟消息、事务消息、消息堆积、消息回溯、死信队列，等等）？&lt;/div&gt;&lt;div&gt;另外还得考虑这些MQ在文档是否齐全？社区是否活跃？在行业内是否广泛运用？是用什么语言编写的？&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="20" y="610" width="770" height="190" as="geometry" />
        </mxCell>
        <mxCell id="Gmhn6fOIwjOEDDS0CNlP-3" value="&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;2203&quot; style=&quot;border-collapse: collapse ; width: 1652pt&quot;&gt;&lt;br/&gt; &lt;colgroup&gt;&lt;col width=&quot;83&quot; style=&quot;width: 62pt&quot;&gt;&lt;br/&gt; &lt;col width=&quot;905&quot; style=&quot;width: 679pt&quot;&gt;&lt;br/&gt; &lt;col width=&quot;1215&quot; style=&quot;width: 911pt&quot;&gt;&lt;br/&gt; &lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style=&quot;height: 14.25pt&quot;&gt;&lt;br/&gt;  &lt;td height=&quot;19&quot; width=&quot;83&quot; style=&quot;height: 14.25pt ; width: 62pt&quot;&gt;&lt;/td&gt;&lt;br/&gt;  &lt;td width=&quot;905&quot; style=&quot;width: 679pt&quot;&gt;优势&lt;/td&gt;&lt;br/&gt;  &lt;td width=&quot;1215&quot; style=&quot;width: 911pt&quot;&gt;劣势&lt;/td&gt;&lt;br/&gt; &lt;/tr&gt;&lt;br/&gt; &lt;tr style=&quot;height: 33.75pt&quot;&gt;&lt;br/&gt;  &lt;td height=&quot;45&quot; style=&quot;height: 33.75pt&quot;&gt;Kafka&lt;/td&gt;&lt;br/&gt;  &lt;td class=&quot;xl65&quot; width=&quot;905&quot; style=&quot;width: 679pt&quot;&gt;性能也很高，发送消息给kafka是毫秒级的性能。可用性也很高，Kafka是可以支持集群部署的，其中部分机器宕机是可以继续运行的。&lt;/td&gt;&lt;br/&gt;  &lt;td class=&quot;xl65&quot; width=&quot;1215&quot; style=&quot;width: 911pt&quot;&gt;1.丢数据，因为Kafka收到消息之后会写入一个磁盘缓冲区里，并没有直接落地到物理磁盘上去，所以要是机器本身故障了，可能会导致磁盘缓冲区里的数据丢失。&lt;br&gt;&lt;br/&gt;    2.功能非常的单一，主要是支持发送消息给他，然后从里面消费消息，其他就没有什么额外的高级功能了。&lt;/td&gt;&lt;br/&gt; &lt;/tr&gt;&lt;br/&gt; &lt;tr style=&quot;height: 42.75pt&quot;&gt;&lt;br/&gt;  &lt;td height=&quot;57&quot; style=&quot;height: 42.75pt&quot;&gt;RabbitMQ&lt;/td&gt;&lt;br/&gt;  &lt;td class=&quot;xl65&quot; width=&quot;905&quot; style=&quot;width: 679pt&quot;&gt;保证数据不丢失，也能保证高可用性，即集群部署的时候部分机器宕机可以继续运行，然后支持部分高级功能，比如说死信队列，消息重试之类的&lt;/td&gt;&lt;br/&gt;  &lt;td class=&quot;xl65&quot; width=&quot;1215&quot; style=&quot;width: 911pt&quot;&gt;1.吞吐量是比较低的，一般就是每秒几万的级别，所以如果遇到特别特别高并发的情况下，支撑起来是有点困难的&lt;br&gt;&lt;br/&gt;    2.集群扩展的时候（也就是加机器部署），还比较麻烦。&lt;br&gt;&lt;br/&gt;    3.开发语言是erlang，国内很少有精通erlang语言的工程师，因此也没办法去阅读他的源代码，甚至修改他的源代码。&lt;/td&gt;&lt;br/&gt; &lt;/tr&gt;&lt;br/&gt; &lt;tr style=&quot;height: 42.75pt&quot;&gt;&lt;br/&gt;  &lt;td height=&quot;57&quot; style=&quot;height: 42.75pt&quot;&gt;RocketMQ&lt;/td&gt;&lt;br/&gt;  &lt;td class=&quot;xl65&quot; width=&quot;905&quot; style=&quot;width: 679pt&quot;&gt;1.吞吐量也同样很高，单机可以达到10万QPS以上，而且可以保证高可用性，性能很高，而且支持通过配置保证数据绝对不丢失，可以部署大规模的集群，还支持各种高级的功能，比如说延迟消息、事务消息、消息回溯、死信队列、消息积压&lt;br&gt;&lt;br/&gt;    2.基于Java开发的，符合国内大多数公司的技术栈，很容易就可以阅读他的源码，甚至是修改他的源码&lt;/td&gt;&lt;br/&gt;  &lt;td class=&quot;xl65&quot; width=&quot;1215&quot; style=&quot;width: 911pt&quot;&gt;官方文档相对简单一些，但是Kafka和RabbitMQ&lt;br&gt;&lt;br/&gt;    的官方文档就非常的全面和详细&lt;/td&gt;&lt;br/&gt; &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-580" y="870" width="2510" height="550" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
